# Pruebas para Múltiples Pipes (Parte Obligatoria)
#
# Objetivo: Verificar el encadenamiento de 3 o más comandos simples
# donde la salida de uno es la entrada del siguiente.

# --- Pruebas Básicas ---

# 1. Cadena de 3 comandos simples.
#    Equivalente a: < infile grep a1 | wc -l | tr -d ' ' > outfile
#    Uso: ./pipex infile "grep a1" "wc -l" "tr -d ' '" outfile
ls -l | grep ".c" | wc -l

# 2. Cadena de 4 comandos.
#    Verifica que la cadena se puede extender.
ls | grep "Makefile" | wc -c | cat -e

# 3. Comando intermedio que no produce salida.
#    El último comando no debería recibir nada y, por lo tanto,
#    producir una salida vacía o un resultado predecible (como 0 para wc).
cat /dev/null | grep "hola" | wc -l

# --- Pruebas con Argumentos y Flags ---

# 4. Comandos con múltiples argumentos y flags.
#    Equivalente a: < infile cat -e | grep -n "a" | wc -l > outfile
ps aux | grep -i "bash" | grep -v "grep" | wc -l

# 5. Uso de `head` y `tail` para seleccionar líneas.
#    Prueba el flujo de datos a través de varios filtros.
cat /etc/passwd | head -n 10 | tail -n 2

# --- Pruebas de Rutas y Comandos ---

# 6. Comandos usando rutas absolutas.
#    Verifica que el programa no depende exclusivamente del PATH.
/bin/ls -la | /usr/bin/grep ".sh" | /usr/bin/wc -l

# 7. Mezcla de comandos con y sin ruta.
/bin/ls | grep "src" | cat -e | wc -m

# --- Casos de Error Simples (Obligatorios) ---

# 8. Un comando en medio de la cadena no existe.
#    El programa debería manejar el error limpiamente (ej: "command not found")
#    y detener la ejecución de esa cadena de pipes.
ls | comandoinexistente | wc -l

# 9. El primer comando no existe.
#    Debería fallar desde el principio.
comandoquenoexiste | grep "a" | wc -l

# 10. El último comando no existe.
#     Los comandos anteriores deberían ejecutarse, pero el final fallará.
ls -l | grep ".c" | comandoerroneo

# 11. Archivo de entrada (infile) no existe.
#     Si tu programa toma un infile, este caso es fundamental.
#     Debería reportar un error como "no such file or directory".
#     Uso: ./pipex non_existent_file "grep a" "wc -l" outfile
